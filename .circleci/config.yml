# .circleci/config.yml
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# Inspired by: https://medium.com/uptech-team/swift-package-manager-and-how-to-cache-it-with-ci-14968cd58c5f
version: 2.1
orbs:
  macos: circleci/macos@2
  ruby: circleci/ruby@2.5.3
jobs:
  build-unit-tests-per-push:
    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1
    working_directory: ~/ios/
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: run_all_unit_tests
      XCODE_SCHEME: brainwalletUnitTests
      XCODE_PROJECT: brainwallet.xcodeproj
      FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
      FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 3
    shell: /bin/bash --login -o pipefail
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:Z4bsDPFhTv8vuTERTBcs6b5RHFRspyI77b7tQUsju1g"
      - checkout
      
      # Restore all caches
      - restore_cache:
          name: Restore caches
          keys:
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-{{ checksum "brainwallet.xcodeproj/project.pbxproj" }}
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-
            - combined-cache-v1-{{ arch }}-
      
      # Setup Ruby, clean environment, and install dependencies
      - run:
          name: Setup Ruby environment and dependencies
          command: |
            # Install Ruby with rbenv
            export PATH="$HOME/.rbenv/bin:$PATH"
            if ! command -v rbenv &> /dev/null; then
              brew update
              brew install rbenv ruby-build
            fi
            eval "$(rbenv init -)"
            rbenv install -s 3.2.2
            rbenv global 3.2.2
            ruby -v
            
            # Clean gem environment
            rm -f Gemfile.lock
            rm -rf vendor/bundle
            gem uninstall fastlane -aIx || true
            gem uninstall scan -aIx || true
            gem cleanup
            
            # Install Bundler and dependencies
            gem install bundler:2.6.9
            bundle config set --local path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
      
      # Setup SSH and initialize submodules
      - run:
          name: Setup SSH and submodules
          command: |
            echo 'github.com ssh-rsa SHA256:Z4bsDPFhTv8vuTERTBcs6b5RHFRspyI77b7tQUsju1g' >> ~/.ssh/known_hosts
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_*
            git submodule init && git submodule update --init Modules/core
      
      # Setup environment files (MUST be before build)
      - run:
          name: Setup environment files
          command: |
            # Export environment variables
            echo 'export BRAINWALLET_IOS_STOREKIT_V1_0_FILE="$BRAINWALLET_IOS_STOREKIT_V1_0_FILE"' >> $BASH_ENV
            echo 'export GOOGLE_SERVICES_PLIST="$GOOGLE_SERVICES_PLIST"' >> $BASH_ENV
            echo 'export REMOTE_CONFIG_DEFAULTS="$REMOTE_CONFIG_DEFAULTS"' >> $BASH_ENV
            echo 'export DEBUG_SERVICE_DATA="$DEBUG_SERVICE_DATA"' >> $BASH_ENV
            
            # Create environment files in root directory (required by Xcode build)
            echo "$BRAINWALLET_IOS_STOREKIT_V1_0_FILE" | base64 --decode > Brainwallet-StoreKit-v1.storekit
            echo "$GOOGLE_SERVICES_PLIST" | base64 --decode > GoogleService-Info.plist
            echo "$REMOTE_CONFIG_DEFAULTS" | base64 --decode > remote-config-defaults.plist
            echo "$DEBUG_SERVICE_DATA" | base64 --decode > service-data.plist
            
            # Verify GoogleService-Info.plist was created successfully
            if [ ! -f "GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist was not created!"
              exit 1
            fi
            
            # Verify the file has content and is valid
            if [ ! -s "GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist is empty!"
              exit 1
            fi
            
            echo "GoogleService-Info.plist created successfully:"
            ls -la GoogleService-Info.plist
            echo "File size: $(wc -c < GoogleService-Info.plist) bytes"
            
            # Display first few lines for debugging (avoid showing sensitive data)
            echo "GoogleService-Info.plist structure:"
            head -10 GoogleService-Info.plist
            
            # Also copy to brainwallet directory if needed
            mkdir -p ./brainwallet
            cp Brainwallet-StoreKit-v1.storekit ./brainwallet/PreLaunchResources/
            cp GoogleService-Info.plist ./brainwallet/PreLaunchResources/
            cp remote-config-defaults.plist ./brainwallet/PreLaunchResources/
            cp service-data.plist ./brainwallet/PreLaunchResources/
            
            # Verify copies were successful
            echo "Files in brainwallet directory:"
            ls -la ./brainwallet/

      # Prepare build environment
      - run:
          name: Prepare build environment
          command: |
            # Clean derived data
            rm -rf ~/Library/Developer/Xcode/DerivedData
            rm -rf ./DerivedData
            
            # Boot simulator
            DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 15 Pro Max" | grep -v "unavailable" | head -1 | sed 's/.*(//' | sed 's/).*//')
            if [ -n "$DEVICE_ID" ]; then
              echo "Booting iPhone 15 Pro Max simulator..."
              xcrun simctl boot "$DEVICE_ID" || echo "Device may already be booted"
              sleep 10
            else
              echo "iPhone 15 Pro Max not found, using available device"
              xcrun simctl list devices
            fi 
      - run:
          name: Verify build prerequisites
          command: |
            pwd
            echo "Verifying GoogleService-Info.plist is available for xcodebuild:"
            
            # Check root directory
            if [ -f "GoogleService-Info.plist" ]; then
              echo "✅ GoogleService-Info.plist found in root directory"
              ls -la GoogleService-Info.plist
            else
              echo "❌ GoogleService-Info.plist NOT found in root directory"
            fi
            
            # Check brainwallet subdirectory
            if [ -f "./brainwallet/GoogleService-Info.plist" ]; then
              echo "✅ GoogleService-Info.plist found in brainwallet directory"
              ls -la ./brainwallet/GoogleService-Info.plist
            else
              echo "❌ GoogleService-Info.plist NOT found in brainwallet directory"
            fi
            
            # Find all plist files for debugging
            echo "All .plist files in project:"
            find . -name "*.plist" -type f
            
            # Ensure at least one GoogleService-Info.plist exists
            if [ ! -f "GoogleService-Info.plist" ] && [ ! -f "./brainwallet/GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist not found in any expected location!"
              exit 1
            fi
            
            echo "✅ All build prerequisites verified"
      - run:
          name: Run Fastlane iPhone 15 simulator Tests
          command: |
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            bundle exec fastlane $FASTLANE_LANE
      - run:
          name: Convert test results to JUnit
          command: |
              if ! command -v xcparse &> /dev/null; then
              brew install chargepoint/xcparse/xcparse
              fi
              # Convert to JUnit XML
              xcparse screenshots output/scan/brainwalletUnitTests.xcresult output/scan/screenshots
              xcparse logs output/scan/brainwalletUnitTests.xcresult output/scan/logs
              xcparse junit output/scan/brainwalletUnitTests.xcresult output/scan/junit.xml
          when: always
      - save_cache:
          name: Save combined cache
          key: combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-{{ checksum "brainwallet.xcodeproj/project.pbxproj" }}
          paths:
            - ~/.rbenv
            - vendor/bundle
            - ~/.gem
            - SourcePackages/
            - ~/Library/Caches/org.swift.swiftpm/
            - ~/Library/org.swift.swiftpm/
            - ./DerivedData
            - ~/Library/Developer/Xcode/DerivedData
            - ~/Library/Caches/com.apple.dt.Xcode/
      
      # Store artifacts and handle failures
      - run:
          name: Capture crash logs
          command: |
            find ~/Library/Logs/DiagnosticReports -name "*Brainwallet*" -type f -exec echo "Found crash log: {}" \; -exec cat {} \; || echo "No crash logs found"
            find ~/Library/Developer/CoreSimulator/Devices/*/data/Library/Logs/CrashReporter/ -name "*Brainwallet*" -type f -exec echo "Found simulator crash log: {}" \; -exec cat {} \; || echo "No simulator crash logs found"
            log show --predicate 'process == "Brainwallet"' --last 10m || echo "No system logs found for Brainwallet"
          when: on_fail
      
      - store_artifacts:
          path: output
      - store_test_results:
          path: ~/output/scan
      - store_artifacts:
          path: ~/Library/Logs/DiagnosticReports
          destination: crash-logs
          when: on_fail

  # New daily maintenance job
  daily-maintenance:
    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1
    working_directory: ~/ios/
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: run_all_tests_iPhone15ProMax
      XCODE_SCHEME: brainwalletAllTests
      XCODE_PROJECT: brainwallet.xcodeproj
      FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
      FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 3
    shell: /bin/bash --login -o pipefail
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:Z4bsDPFhTv8vuTERTBcs6b5RHFRspyI77b7tQUsju1g"
      - checkout
      
      # Restore caches for daily maintenance
      - restore_cache:
          name: Restore caches
          keys:
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-{{ checksum "brainwallet.xcodeproj/project.pbxproj" }}
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-
            - combined-cache-v1-{{ arch }}-
      
      # Daily maintenance tasks
      - run:
          name: Daily maintenance tasks
          command: |
            echo "=== Daily Maintenance Report - $(date) ==="
            
            # Clean up old derived data and caches
            echo "Cleaning up old build artifacts..."
            rm -rf ~/Library/Developer/Xcode/DerivedData/*
            rm -rf ./DerivedData
            
            # Check for security updates
            echo "Checking for security updates..."
            brew outdated | grep -E "(openssl|git|ruby)" || echo "No critical security updates found"
            
            # Update Ruby dependencies and check for vulnerabilities
            export PATH="$HOME/.rbenv/bin:$PATH"
            if command -v rbenv &> /dev/null; then
              eval "$(rbenv init -)"
              if [ -f "Gemfile" ]; then
                echo "Checking Ruby gem vulnerabilities..."
                bundle install --quiet
                bundle audit --update || echo "Bundle audit not available or found issues"
              fi
            fi
            
            # Check Swift package dependencies for updates
            if [ -f "Package.resolved" ]; then
              echo "Current Swift Package versions:"
              cat Package.resolved | grep -A 2 -B 2 "version"
            fi
            
            # Generate project health report
            echo "=== Project Health Report ==="
            echo "Last commit: $(git log -1 --pretty=format:'%h - %s (%cr) by %an')"
            echo "Repository size: $(du -sh .git 2>/dev/null || echo 'Unknown')"
            echo "Number of Swift files: $(find . -name "*.swift" | wc -l)"
            echo "Number of test files: $(find . -name "*Test*.swift" -o -name "*Tests*.swift" | wc -l)"
            
            # Check for large files that might need attention
            echo "=== Large Files Check ==="
            find . -type f -size +10M -not -path "./.git/*" -not -path "./DerivedData/*" | head -10 || echo "No large files found"
      
      # Run a quick health check build (without full tests)
      - run:
          name: Daily health check build
          command: |
            echo "Running daily health check build..."
            
            # Setup environment files for build check
            echo 'export GOOGLE_SERVICES_PLIST="$GOOGLE_SERVICES_PLIST"' >> $BASH_ENV
            echo 'export REMOTE_CONFIG_DEFAULTS="$REMOTE_CONFIG_DEFAULTS"' >> $BASH_ENV
            echo 'export DEBUG_SERVICE_DATA="$DEBUG_SERVICE_DATA"' >> $BASH_ENV
            
            # Create minimal environment files for build verification
            echo "$GOOGLE_SERVICES_PLIST" | base64 --decode > GoogleService-Info.plist
            echo "$REMOTE_CONFIG_DEFAULTS" | base64 --decode > remote-config-defaults.plist
            echo "$DEBUG_SERVICE_DATA" | base64 --decode > service-data.plist
            
            # Copy to brainwallet directory
            mkdir -p ./brainwallet
            cp *.plist ./brainwallet/ 2>/dev/null || echo "Some files may not exist"
            
            # Quick build verification (build only, no tests)
            xcodebuild build \
              -project brainwallet.xcodeproj \
              -scheme brainwallet \
              -configuration Debug \
              -destination 'generic/platform=iOS Simulator' \
              -quiet || echo "Build verification failed - needs attention"
      
      # Send notification on failure
      - run:
          name: Daily maintenance failure notification
          command: |
            echo "Daily maintenance completed with errors on $(date)"
            echo "Please check the CircleCI logs for details"
            # Add Slack webhook or email notification here if needed
            # curl -X POST -H 'Content-type: application/json' \
            #   --data '{"text":"Daily maintenance failed for brainwallet-ios"}' \
            #   $SLACK_WEBHOOK_URL
          when: on_fail
      
      - store_artifacts:
          path: output
          destination: daily-maintenance-logs
  build-uitest:
    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1
    working_directory: ~/ios/
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: run_ui_iphone16promax_tests
      XCODE_SCHEME: brainwalletUITests
      XCODE_PROJECT: brainwallet.xcodeproj
      FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
      FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 3
    shell: /bin/bash --login -o pipefail
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:Z4bsDPFhTv8vuTERTBcs6b5RHFRspyI77b7tQUsju1g"
      - checkout
      
      # Restore all caches
      - restore_cache:
          name: Restore caches
          keys:
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-{{ checksum "brainwallet.xcodeproj/project.pbxproj" }}
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-
            - combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-
            - combined-cache-v1-{{ arch }}-
      
      # Setup Ruby, clean environment, and install dependencies
      - run:
          name: Setup Ruby environment and dependencies
          command: |
            # Install Ruby with rbenv
            export PATH="$HOME/.rbenv/bin:$PATH"
            if ! command -v rbenv &> /dev/null; then
              brew update
              brew install rbenv ruby-build
            fi
            eval "$(rbenv init -)"
            rbenv install -s 3.2.2
            rbenv global 3.2.2
            ruby -v
            
            # Clean gem environment
            rm -f Gemfile.lock
            rm -rf vendor/bundle
            gem uninstall fastlane -aIx || true
            gem uninstall scan -aIx || true
            gem cleanup
            
            # Install Bundler and dependencies
            gem install bundler:2.6.9
            bundle config set --local path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
      
      # Setup SSH and initialize submodules
      - run:
          name: Setup SSH and submodules
          command: |
            echo 'github.com ssh-rsa SHA256:Z4bsDPFhTv8vuTERTBcs6b5RHFRspyI77b7tQUsju1g' >> ~/.ssh/known_hosts
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_*
            git submodule sync --recursive
            git submodule update --init --recursive --jobs=4 --filter=blob:none -- ':(exclude)Private/ios-games'
            git submodule init && git submodule update --init Modules/core

      # Setup environment files (MUST be before build)
      - run:
          name: Setup environment files
          command: |
            # Export environment variables
            echo 'export GOOGLE_SERVICES_PLIST="$GOOGLE_SERVICES_PLIST"' >> $BASH_ENV
            echo 'export REMOTE_CONFIG_DEFAULTS="$REMOTE_CONFIG_DEFAULTS"' >> $BASH_ENV
            echo 'export DEBUG_SERVICE_DATA="$DEBUG_SERVICE_DATA"' >> $BASH_ENV
            
            # Create environment files in root directory (required by Xcode build)
            echo "$GOOGLE_SERVICES_PLIST" | base64 --decode > GoogleService-Info.plist
            echo "$REMOTE_CONFIG_DEFAULTS" | base64 --decode > remote-config-defaults.plist
            echo "$DEBUG_SERVICE_DATA" | base64 --decode > service-data.plist
            
            # Verify GoogleService-Info.plist was created successfully
            if [ ! -f "GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist was not created!"
              exit 1
            fi
            
            # Verify the file has content and is valid
            if [ ! -s "GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist is empty!"
              exit 1
            fi
            
            echo "GoogleService-Info.plist created successfully:"
            ls -la GoogleService-Info.plist
            echo "File size: $(wc -c < GoogleService-Info.plist) bytes"
            
            # Display first few lines for debugging (avoid showing sensitive data)
            echo "GoogleService-Info.plist structure:"
            head -10 GoogleService-Info.plist
            
            # Also copy to brainwallet directory if needed
            mkdir -p ./brainwallet
            cp GoogleService-Info.plist ./brainwallet/PreLaunchResources/
            cp remote-config-defaults.plist ./brainwallet/PreLaunchResources/
            cp service-data.plist ./brainwallet/PreLaunchResources/
            
            # Verify copies were successful
            echo "Files in brainwallet directory:"
            ls -la ./brainwallet/

      # Prepare build environment
      - run:
          name: Prepare build environment
          command: |
            # Clean derived data
            rm -rf ~/Library/Developer/Xcode/DerivedData
            rm -rf ./DerivedData
            
            # Boot simulator
            DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 15 Pro Max" | grep -v "unavailable" | head -1 | sed 's/.*(//' | sed 's/).*//')
            if [ -n "$DEVICE_ID" ]; then
              echo "Booting iPhone 15 Pro Max simulator..."
              xcrun simctl boot "$DEVICE_ID" || echo "Device may already be booted"
              sleep 10
            else
              echo "iPhone 15 Pro Max not found, using available device"
              xcrun simctl list devices
            fi 
      - run:
          name: Verify build prerequisites
          command: |
            pwd
            echo "Verifying GoogleService-Info.plist is available for xcodebuild:"
            
            # Check root directory
            if [ -f "GoogleService-Info.plist" ]; then
              echo "✅ GoogleService-Info.plist found in root directory"
              ls -la GoogleService-Info.plist
            else
              echo "❌ GoogleService-Info.plist NOT found in root directory"
            fi
            
            # Check brainwallet subdirectory
            if [ -f "./brainwallet/GoogleService-Info.plist" ]; then
              echo "✅ GoogleService-Info.plist found in brainwallet directory"
              ls -la ./brainwallet/GoogleService-Info.plist
            else
              echo "❌ GoogleService-Info.plist NOT found in brainwallet directory"
            fi
            
            # Find all plist files for debugging
            echo "All .plist files in project:"
            find . -name "*.plist" -type f
            
            # Ensure at least one GoogleService-Info.plist exists
            if [ ! -f "GoogleService-Info.plist" ] && [ ! -f "./brainwallet/GoogleService-Info.plist" ]; then
              echo "ERROR: GoogleService-Info.plist not found in any expected location!"
              exit 1
            fi
            
            echo "✅ All build prerequisites verified"
      - run:
          name: Run Fastlane iPhone 15 simulator Tests
          command: |
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            bundle exec fastlane $FASTLANE_LANE
      - save_cache:
          name: Save combined cache
          key: combined-cache-v1-{{ arch }}-{{ checksum "Gemfile" }}-{{ checksum "Package.resolved" }}-{{ checksum "brainwallet.xcodeproj/project.pbxproj" }}
          paths:
            - ~/.rbenv
            - vendor/bundle
            - ~/.gem
            - SourcePackages/
            - ~/Library/Caches/org.swift.swiftpm/
            - ~/Library/org.swift.swiftpm/
            - ./DerivedData
            - ~/Library/Developer/Xcode/DerivedData
            - ~/Library/Caches/com.apple.dt.Xcode/
      
      # Store artifacts and handle failures
      - run:
          name: Convert test results to JUnit
          command: |
              if ! command -v xcparse &> /dev/null; then
              brew install chargepoint/xcparse/xcparse
              fi
              xcparse junit output/scan/brainwalletUnitTests.xcresult output/scan/junit.xml
          when: always
      - run:
          name: Capture crash logs
          command: |
            find ~/Library/Logs/DiagnosticReports -name "*Brainwallet*" -type f -exec echo "Found crash log: {}" \; -exec cat {} \; || echo "No crash logs found"
            find ~/Library/Developer/CoreSimulator/Devices/*/data/Library/Logs/CrashReporter/ -name "*Brainwallet*" -type f -exec echo "Found simulator crash log: {}" \; -exec cat {} \; || echo "No simulator crash logs found"
            log show --predicate 'process == "Brainwallet"' --last 10m || echo "No system logs found for Brainwallet"
          when: on_fail
      
      - store_artifacts:
          path: output
      - store_test_results:
          path: ~/output/scan
      - store_artifacts:
          path: ~/Library/Logs/DiagnosticReports
          destination: crash-logs
          when: on_fail
workflows:
  version: 4
  
  # Main workflow - runs unit tests by default
  build-test-brainwallet-ios:
    jobs:
      - build-unit-tests-per-push:
          context: 
            - bw-ios-test
  
  # UI test workflow - only runs when manually triggered or on specific branches
  build-uitest-brainwallet-ios:
    jobs:
      - build-uitest:
          context: 
            - bw-ios-test
          filters:
            branches:
              only:
                - ui-test-branch  # Only run UI tests on this specific branch
  # Daily scheduled workflow UITest UnitTest
  daily-maintenance-workflow:
    triggers:
      - schedule:
          # Run daily at 6:00 AM UTC (adjust for your timezone)
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
                - develop
    jobs:
      - daily-maintenance:
          context:
            - bw-ios-test
