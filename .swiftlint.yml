# Default Swiftlint
# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
  - colon
  - comma
  - control_statement

analyzer_rules: # rules run by `swiftlint analyze`
  - explicit_self

# Case-sensitive paths to include during linting. Directory paths supplied on the
# command line will be ignored.
included: 
  - brainwallet
excluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`
  - brainwallet/BR*.swift
  - brainwallet/BWAPIClientClasses
  - brainwalletTests/*.swift
  - brainwallet/Legacy_BW_BRClasses
  - BuildTools/*
  - /SourcePackages
  - Frameworks
  - Modules
  - Products 

# If true, SwiftLint will not fail if no lintable files are found.
allow_zero_lintable_files: false

# If true, SwiftLint will treat all warnings as errors.
strict: false

# If true, SwiftLint will treat all errors as warnings.
lenient: false

# The path to a baseline file, which will be used to filter out detected violations.
baseline: SwiftlintBaseline.json

# The path to save detected violations to as a new baseline.
write_baseline: SwiftlintBaseline.json

# If true, SwiftLint will check for updates after linting or analyzing.
check_for_updates: true

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly

# rules that have both warning and error levels, can set just the warning level
# implicitly
opt_in_rules:
  - empty_count # find all the available rules by running: `swiftlint rules`
  - trailing_whitespace
  - indentation_width

indentation_width: 4
line_length: 110

# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error

# or they can set both explicitly
file_length:
  warning: 500
  error: 1200

# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: 
    - iPhone # excluded via string
  allowed_symbols: ["_"] # these are allowed in type names
  
identifier_name:
  min_length: # only min_length
    error: 4 # only error
  excluded: # excluded via string array
    - id
    - URL
    - url
    - tag
    - GlobalAPIKey
    - VAR_INT16_HEADER
    - VAR_INT32_HEADER
    - VAR_INT64_HEADER

reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)


# reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)



  
# Default Airbnb swiftlint
# only_rules:
#   - fatal_error_message
#   - implicitly_unwrapped_optional
#   - legacy_cggeometry_functions
#   - legacy_constant
#   - legacy_constructor
#   - legacy_nsgeometry_functions
#   - unused_optional_binding
#   - unowned_variable_capture
#   - custom_rules
#
# excluded:
#   - Carthage
#   - Pods
#   - .build
#
# indentation: 2
#
# custom_rules:
#   no_objcMembers:
#     name: "@objcMembers"
#     regex: "@objcMembers"
#     message: "Explicitly use @objc on each member you want to expose to Objective-C"
#     severity: error
#   no_direct_standard_out_logs:
#     name: "Writing log messages directly to standard out is disallowed"
#     regex: "(\\bprint|\\bdebugPrint|\\bdump|Swift\\.print|Swift\\.debugPrint|Swift\\.dump|_printChanges)\\s*\\("
#     match_kinds:
#     - identifier
#     message: "Don't commit `print(…)`, `debugPrint(…)`, `dump(…)`, or `_printChanges()` as they write to standard out in release. Either log to a dedicated logging system or silence this warning in debug-only scenarios explicitly using `// swiftlint:disable:next no_direct_standard_out_logs`"
#     severity: error
#   no_file_literal:
#     name: "#file is disallowed"
#     regex: "(\\b#file\\b)"
#     match_kinds:
#     - identifier
#     message: "Instead of #file, use #fileID"
#     severity: error
#   no_filepath_literal:
#     name: "#filePath is disallowed"
#     regex: "(\\b#filePath\\b)"
#     match_kinds:
#     - identifier
#     message: "Instead of #filePath, use #fileID."
#     severity: error
#   no_unchecked_sendable:
#     name: "`@unchecked Sendable` is discouraged."
#     regex: "@unchecked Sendable"
#     match_kinds:
#     - attribute.builtin
#     - typeidentifier
#     message: "Instead of using `@unchecked Sendable`, consider a safe alternative like a standard `Sendable` conformance or using `@preconcurrency import`. If you really must use `@unchecked Sendable`, you can add a `// swiftlint:disable:next no_unchecked_sendable` annotation with an explanation for how we know the type is thread-safe, and why we have to use @unchecked Sendable instead of Sendable. More explanation and suggested safe alternatives are available at https://github.com/airbnb/swift#unchecked-sendable."
#     severity: error